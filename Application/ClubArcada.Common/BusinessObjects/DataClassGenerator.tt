using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using ClubArcada.Common;
using ClubArcada.Common.BusinessObjects.Data;
using ClubArcada.Common.BusinessObjects.DataClasses;<#@ template debug="false" hostspecific="false" language="C#" #>  <#@ import namespace="System" #><#@ assembly name="$(TargetDir)ClubArcada.Common.dll" #> <#@ assembly name="C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.6.1\System.Data.dll" #> <#@ assembly name="C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.6.1\System.Data.Linq.dll" #> <#@ output extension=".cs" #>  

namespace ClubArcada.Common.BusinessObjects.DataClasses 
{
        public interface IDataClassLight
        {
            bool IsNew { get; set; }

             Guid Id { get; set; }

             Guid CreatedByUserId { get; set; }

			 DateTime DateCreated { get; set; }
        }
        
		public interface IDataClass<T> where T : class
		{
			 void Delete(Credentials cr);

			 T Save(Credentials cr);

             void LoadCreatedBy(Credentials cr);
		}

        public abstract class BaseClass<IDataClassLight>
        {
            public User CreatedByUser { get;  set;} 
        }
<# foreach (System.Data.Linq.Mapping.MetaTable name in new ClubArcada.Common.BusinessObjects.DataClasses.CADBDataContext().Mapping.GetTables())  { 
		var tableName = name.TableName.Replace("dbo.", string.Empty);
		var singular = tableName;
		singular = tableName.EndsWith("ies") ? tableName.Replace("ies", "y") : tableName;
		singular = tableName.EndsWith("s") && !tableName.EndsWith("ies") ?  tableName.Remove(tableName.Length-1, 1) : singular;#>  

	  public partial class <#= singular #> : BaseClass<<#= singular #>>, IDataClassLight, IDataClass<<#= singular #>>
	  {
		public bool IsNew { get { return Id.IsEmpty(); } set { } }

        public string DateCreatedFriendlyDateTime { get { return DateCreated.ToString("dd.MM.yyyy hh:mm"); } private set { } }

        public string DateCreatedFriendlyDate { get { return DateCreated.ToString("dd.MM.yyyy"); } private set { } }

		public void Delete(Credentials cr)
        {
            <#= singular #>Data.Delete(cr, Id);
        }

		public <#= singular #> Save(Credentials cr) 
		{
			return <#= singular #>Data.Save(cr, this);
		}

        public void LoadCreatedBy(Credentials cr)
        {
            CreatedByUser = UserData.GetById(cr, CreatedByUserId);
        }

		internal void PrepareToSave(Credentials cr)
		{
            if(Id.IsEmpty())
                Id = Guid.NewGuid();

            if (DateCreated.IsNull() || (DateCreated.IsNotNull() && DateCreated.Year < DateTime.Now.AddYears(-10).Year))
                DateCreated = DateTime.Now;

            if(CreatedByUserId.IsEmpty())
                CreatedByUserId = cr.UserId;
		}
	  } <# } #>  
}  
 
namespace ClubArcada.Common.BusinessObjects.Data {

        public abstract class BaseClass
        {

        }
<# foreach (System.Data.Linq.Mapping.MetaTable name in new ClubArcada.Common.BusinessObjects.DataClasses.CADBDataContext().Mapping.GetTables())  { 
		var tableName = name.TableName.Replace("dbo.", string.Empty);
		var singular = tableName;
		singular = tableName.EndsWith("ies") ? tableName.Replace("ies", "y") : tableName;
		singular = tableName.EndsWith("s") && !tableName.EndsWith("ies") ?  tableName.Remove(tableName.Length-1, 1) : singular;#>  
  public partial class <#= singular #>Data : BaseClass
  {
		public static List<<#= singular #>> GetList(Credentials cr, bool? onlyActive = true, bool? loadCreatedByUser = true)
        {
            using (var dc = CADBDataContext.New(cr.ConnectionString))
            {
                var result = onlyActive.True() ? dc.<#= tableName #>.Where(i => i.DateDeleted == null).ToList() : dc.<#= tableName #>.ToList();

                if(result.Any())
                {
                    if(loadCreatedByUser.True())
                    {
                        foreach(var r in result)
                        {
                            r.CreatedByUser = dc.Users.SingleOrDefault(u => u.Id == r.CreatedByUserId);
                        }
                    }

                    return result;
                }
                else
                {
                    return new List<<#= singular #>>();
                }
            }
        }

		public static <#= singular #> GetById(Credentials cr, Guid id)
        {
            using (var dc = CADBDataContext.New(cr.ConnectionString))
            {
                var result = dc.<#= tableName #>.SingleOrDefault(u => u.Id == id);

                if(result.IsNotNull())
                    result.CreatedByUser = dc.Users.SingleOrDefault(u => u.Id == result.CreatedByUserId);
                
                return result;
            }
        }

		public static <#= singular #> Save(Credentials cr, <#= singular #> item)
        {
            var loaded = GetById(cr, item.Id);
            return loaded.IsNull() ? Create(cr, item) : Update(cr, item);
        }

		private static <#= singular #> Create(Credentials cr, <#= singular #> item)
        {
            item.PrepareToSave(cr);
            
            using (var dc = CADBDataContext.New(cr.ConnectionString))
            {
                dc.<#= tableName #>.InsertOnSubmit(item);
                dc.SubmitChanges();
            }

            return GetById(cr, item.Id);
        }

		private static <#= singular #> Update(Credentials cr, <#= singular #> item)
        {
            using (var dc = CADBDataContext.New(cr.ConnectionString))
            {
                var itemToUpdate = dc.<#= tableName #>.SingleOrDefault(u => u.Id == item.Id);
				
				if(itemToUpdate.IsNotNull())
				{
					string[] igoreList = { "Id", "DateCreated", "CreatedByUserId", "CreatedByUser", "Detail" };

					item.CompareAndUpdate<<#= singular #>>(ref itemToUpdate, igoreList);

					dc.SubmitChanges();
				}
			}

            return GetById(cr, item.Id);
        }

		public static void Delete(Credentials cr, Guid id)
        {
            using (var dc = CADBDataContext.New(cr.ConnectionString))
            {
                var toDelete = dc.<#= tableName #>.SingleOrDefault(u => u.Id == id);
				
				if(toDelete.IsNotNull())
				{
					toDelete.DateDeleted = DateTime.Now;
					dc.SubmitChanges();
				}
			}
        }

        public async static Task<List<<#= singular #>>> GetListAsync(Credentials cr, bool? onlyActive = true)
        {
            using (var dc = CADBDataContext.New(cr.ConnectionString))
            {
                Func<List<<#= singular #>>> a = () =>
                {
                    if (onlyActive.True())
                    {
                        return dc.<#= tableName #>.Where(i => i.DateDeleted == null).ToList();
                    }
                    else
                    {
                        return dc.<#= tableName #>.ToList();
                    }
                };

                return await new Task<List<<#= singular #>>>(a);
            }
        }

        public async static Task<<#= singular #>> GetByIdAsync(Credentials cr, Guid id)
        {
            using (var dc = CADBDataContext.New(cr.ConnectionString))
            {
                Func<<#= singular #>> a = () =>
                {
                    return dc.<#= tableName #>.SingleOrDefault(u => u.Id == id);
     
                };

                return await new Task<<#= singular #>>(a);
            }
        }
  }  
<# } #>  

}  
 